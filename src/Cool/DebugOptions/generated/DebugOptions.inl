/* -----------------------------------------------------------------------------
 * This file was automatically generated by a Python script.
 * PLEASE DON'T EDIT IT DIRECTLY, your changes would be overwritten the next time the script is run.
 * Instead, go to "generate_debug_options.py" and edit the "DebugOptions" function there.
 * -----------------------------------------------------------------------------
 */

#pragma once
#if DEBUG

#include <Cool/DebugOptions/DebugOptionsManager.h>
#include <Cool/Path/Path.h>
#include <Cool/Serialization/as_json.h>

namespace Cool {

class DebugOptions {
public:
    // clang-format off
[[nodiscard]] static auto log_when_creating_icon() -> bool& { return instance().log_when_creating_icon; }
[[nodiscard]] static auto log_number_of_threads_in_the_thread_pool() -> bool& { return instance().log_number_of_threads_in_the_thread_pool; }
    // clang-format on

private:
    struct Instance {
        bool log_when_creating_icon{false};
        bool log_number_of_threads_in_the_thread_pool{false};

    private:
        // Serialization
        friend class cereal::access;
        template<class Archive>
        void serialize(Archive& archive)
        {
            archive(
                cereal::make_nvp("Log when creating icon", log_when_creating_icon),
                cereal::make_nvp("Log the number of threads in the thread pool", log_number_of_threads_in_the_thread_pool)
            );
        }
    };

    static void reset_all()
    {
        instance().log_when_creating_icon                   = false;
        instance().log_number_of_threads_in_the_thread_pool = false;
    }

    static void save_to_file()
    {
        Cool::Serialization::to_json(
            instance(),
            Cool::Path::root() + "/cache--debug-options-cool.json",
            "Debug Options"
        );
    }

    static auto load_debug_options() -> Instance
    {
        auto the_instance = Instance{};
        Cool::Serialization::from_json(the_instance, Cool::Path::root() + "/cache--debug-options-cool.json");
        return the_instance;
    }

    static auto instance() -> Instance&
    {
        static auto the_instance = Instance{load_debug_options()};
        return the_instance;
    }

    template<typename... Ts>
    friend class Cool::DebugOptionsManager; // We go through this indirection so that only the files which include "DebugOptionsManager" can call `imgui_checkboxes_for_all_options()`
    static void imgui_checkboxes_for_all_options(const ImGuiTextFilter& filter)
    {
        if (filter.PassFilter("Log when creating icon"))
            ImGui::Checkbox("Log when creating icon", &instance().log_when_creating_icon);
        if (filter.PassFilter("Log the number of threads in the thread pool"))
            ImGui::Checkbox("Log the number of threads in the thread pool", &instance().log_number_of_threads_in_the_thread_pool);
    }
};

} // namespace Cool

#endif
