/* -----------------------------------------------------------------------------
 * This file was automatically generated by a Python script.
 * PLEASE DON'T EDIT IT DIRECTLY, your changes would be overwritten the next time the script is run.
 * Instead, go to "generate_debug_options.py" and edit the "DebugOptions" function there.
 * -----------------------------------------------------------------------------
 */

#include "Cool/ImGui/ImGuiExtras.h"
#include "Cool/Path/Path.h"
#include "Cool/Serialization/JsonAutoSerializer.hpp"
#include "wafl/wafl.hpp"

namespace Cool {
template<typename... Ts>
class DebugOptionsManager; // Forward declare this class so that the friend declaration that comes later on doesn't fail.
}

namespace Cool {

class DebugOptions {
public:
    static void test_message_console__window(std::function<void()> callback)
    {
        bool& val = json().get<bool>("Test Message Console", false);
        if (val)
        {
            ImGui::Begin(Cool::icon_fmt("Test Message Console", ICOMOON_WRENCH).c_str(), &val, ImGuiWindowFlags_NoFocusOnAppearing);
            callback();
            ImGui::End();
            if (!val) // Window has just been closed manually by the user
                json().save();
        }
    }
    static void test_notifications__window(std::function<void()> callback)
    {
        bool& val = json().get<bool>("Test Notifications", false);
        if (val)
        {
            ImGui::Begin(Cool::icon_fmt("Test Notifications", ICOMOON_WRENCH).c_str(), &val, ImGuiWindowFlags_NoFocusOnAppearing);
            callback();
            ImGui::End();
            if (!val) // Window has just been closed manually by the user
                json().save();
        }
    }
    static void test_tasks__window(std::function<void()> callback)
    {
        bool& val = json().get<bool>("Test Tasks", false);
        if (val)
        {
            ImGui::Begin(Cool::icon_fmt("Test Tasks", ICOMOON_WRENCH).c_str(), &val, ImGuiWindowFlags_NoFocusOnAppearing);
            callback();
            ImGui::End();
            if (!val) // Window has just been closed manually by the user
                json().save();
        }
    }
    [[nodiscard]] static auto log_when_autosaving() -> bool& { return json().get<bool>("Log when autosaving", false); }
    [[nodiscard]] static auto log_when_rendering_alpha_checkerboard_background() -> bool& { return json().get<bool>("Log when rendering alpha checkerboard background", false); }
    [[nodiscard]] static auto log_when_creating_textures() -> bool& { return json().get<bool>("Log when creating textures", false); }
    [[nodiscard]] static auto log_when_computing_audio_features() -> bool& { return json().get<bool>("Log when computing audio features", false); }
    static void               texture_library_debug_view(std::function<void()> callback)
    {
        bool& val = json().get<bool>("View Texture Library", false);
        if (val)
        {
            ImGui::Begin(Cool::icon_fmt("Texture Library", ICOMOON_WRENCH).c_str(), &val, ImGuiWindowFlags_NoFocusOnAppearing);
            callback();
            ImGui::End();
            if (!val) // Window has just been closed manually by the user
                json().save();
        }
    }
#if DEBUG
    [[nodiscard]] static auto log_opengl_info() -> bool& { return json().get<bool>("Log OpenGL info", false); }
#endif
    [[nodiscard]] static auto log_internal_warnings() -> bool&
    {
        return json().get<bool>("Log internal warnings",
#if defined(DEBUG)
                                true
#else
                                false
#endif
        );
    }
    [[nodiscard]] static auto log_mouse_position_in_view() -> bool& { return json().get<bool>("Log mouse position in View", false); }
    [[nodiscard]] static auto show_command_line_arguments() -> bool& { return json().get<bool>("Show command-line arguments", false); }
    static void               test_presets__window(std::function<void()> callback)
    {
        bool& val = json().get<bool>("Test Presets", false);
        if (val)
        {
            ImGui::Begin(Cool::icon_fmt("Test Presets", ICOMOON_WRENCH).c_str(), &val, ImGuiWindowFlags_NoFocusOnAppearing);
            callback();
            ImGui::End();
            if (!val) // Window has just been closed manually by the user
                json().save();
        }
    }
    static void test_markdown_formatting_window(std::function<void()> callback)
    {
        bool& val = json().get<bool>("Test Markdown Formatting", false);
        if (val)
        {
            ImGui::Begin(Cool::icon_fmt("Test Markdown Formatting", ICOMOON_WRENCH).c_str(), &val, ImGuiWindowFlags_NoFocusOnAppearing);
            callback();
            ImGui::End();
            if (!val) // Window has just been closed manually by the user
                json().save();
        }
    }
    static void emulate_midi_keyboard(std::function<void()> callback)
    {
        bool& val = json().get<bool>("Emulate midi keyboard", false);
        if (val)
        {
            ImGui::Begin(Cool::icon_fmt("Emulate midi keyboard", ICOMOON_WRENCH).c_str(), &val, ImGuiWindowFlags_NoFocusOnAppearing);
            callback();
            ImGui::End();
            if (!val) // Window has just been closed manually by the user
                json().save();
        }
    }
    static void test_tips(std::function<void()> callback)
    {
        bool& val = json().get<bool>("Test tips", false);
        if (val)
        {
            ImGui::Begin(Cool::icon_fmt("Test tips", ICOMOON_WRENCH).c_str(), &val, ImGuiWindowFlags_NoFocusOnAppearing);
            callback();
            ImGui::End();
            if (!val) // Window has just been closed manually by the user
                json().save();
        }
    }
    [[nodiscard]] static auto public_exhibition_mode() -> bool& { return json().get<bool>("Public exhibition mode", false); }
    static void               style_editor(std::function<void()> callback)
    {
        bool& val = json().get<bool>("Style Editor", false);
        if (val)
        {
            ImGui::Begin(Cool::icon_fmt("Style Editor", ICOMOON_WRENCH).c_str(), &val, ImGuiWindowFlags_NoFocusOnAppearing);
            callback();
            ImGui::End();
            if (!val) // Window has just been closed manually by the user
                json().save();
        }
    }
    static void color_themes_editor(std::function<void()> callback)
    {
        bool& val = json().get<bool>("Color Themes: Editor", false);
        if (val)
        {
            ImGui::Begin(Cool::icon_fmt("Color Themes: Editor", ICOMOON_WRENCH).c_str(), &val, ImGuiWindowFlags_NoFocusOnAppearing);
            callback();
            ImGui::End();
            if (!val) // Window has just been closed manually by the user
                json().save();
        }
    }
    static void color_themes_advanced_config_window(std::function<void()> callback)
    {
        bool& val = json().get<bool>("Color Themes: Advanced Config", false);
        if (val)
        {
            ImGui::Begin(Cool::icon_fmt("Color Themes: Advanced Config", ICOMOON_WRENCH).c_str(), &val, ImGuiWindowFlags_NoFocusOnAppearing);
            callback();
            ImGui::End();
            if (!val) // Window has just been closed manually by the user
                json().save();
        }
    }
#if DEBUG
    static void show_all_icons(std::function<void()> callback)
    {
        bool& val = json().get<bool>("Show all icons", false);
        if (val)
        {
            ImGui::Begin(Cool::icon_fmt("Show all icons", ICOMOON_WRENCH).c_str(), &val, ImGuiWindowFlags_NoFocusOnAppearing);
            callback();
            ImGui::End();
            if (!val) // Window has just been closed manually by the user
                json().save();
        }
    }
#endif
#if DEBUG
    [[nodiscard]] static auto imgui_item_picker() -> bool& { return json().get<bool>("ImGui Item Picker", false); }
#endif

private:
    static auto json() -> Cool::JsonAutoSerializer<bool>&
    {
        static auto the_json = Cool::JsonAutoSerializer<bool>{Cool::Path::user_data() / "debug_options_cool.json", true};
        return the_json;
    }

    static void reset_all()
    {
        json().get<bool>("Test Message Console", false)                             = false;
        json().get<bool>("Test Notifications", false)                               = false;
        json().get<bool>("Test Tasks", false)                                       = false;
        json().get<bool>("Log when autosaving", false)                              = false;
        json().get<bool>("Log when rendering alpha checkerboard background", false) = false;
        json().get<bool>("Log when creating textures", false)                       = false;
        json().get<bool>("Log when computing audio features", false)                = false;
        json().get<bool>("View Texture Library", false)                             = false;
#if DEBUG
        json().get<bool>("Log OpenGL info", false) = false;
#endif
        json().get<bool>("Log internal warnings", false) =
#if defined(DEBUG)
            true
#else
            false
#endif
            ;
        json().get<bool>("Log mouse position in View", false)    = false;
        json().get<bool>("Test Presets", false)                  = false;
        json().get<bool>("Test Markdown Formatting", false)      = false;
        json().get<bool>("Emulate midi keyboard", false)         = false;
        json().get<bool>("Test tips", false)                     = false;
        json().get<bool>("Public exhibition mode", false)        = false;
        json().get<bool>("Style Editor", false)                  = false;
        json().get<bool>("Color Themes: Editor", false)          = false;
        json().get<bool>("Color Themes: Advanced Config", false) = false;
#if DEBUG
        json().get<bool>("Show all icons", false) = false;
#endif
        json().save();
    }

    static void update()
    {
        json().update();
    }

    template<typename... Ts>
    friend class Cool::DebugOptionsManager; // We go through this indirection so that only the files which include "DebugOptionsManager" can call `imgui_ui_for_all_options()`

    static void imgui_ui_for_all_options(std::string_view filter)
    {
        if (wafl::similarity_match({filter, "Test Message Console"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Test Message Console", false);
            if (Cool::ImGuiExtras::toggle("Test Message Console", &val))
                json().save();
        }

        if (wafl::similarity_match({filter, "Test Notifications"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Test Notifications", false);
            if (Cool::ImGuiExtras::toggle("Test Notifications", &val))
                json().save();
        }

        if (wafl::similarity_match({filter, "Test Tasks"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Test Tasks", false);
            if (Cool::ImGuiExtras::toggle("Test Tasks", &val))
                json().save();
        }

        if (wafl::similarity_match({filter, "Log when autosaving"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Log when autosaving", false);
            if (Cool::ImGuiExtras::toggle("Log when autosaving", &val))
                json().save();
        }

        if (wafl::similarity_match({filter, "Log when rendering alpha checkerboard background"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Log when rendering alpha checkerboard background", false);
            if (Cool::ImGuiExtras::toggle("Log when rendering alpha checkerboard background", &val))
                json().save();
        }

        if (wafl::similarity_match({filter, "Log when creating textures"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Log when creating textures", false);
            if (Cool::ImGuiExtras::toggle("Log when creating textures", &val))
                json().save();
        }

        if (wafl::similarity_match({filter, "Log when computing audio features"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Log when computing audio features", false);
            if (Cool::ImGuiExtras::toggle("Log when computing audio features", &val))
                json().save();
        }

        if (wafl::similarity_match({filter, "View Texture Library"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("View Texture Library", false);
            if (Cool::ImGuiExtras::toggle("View Texture Library", &val))
                json().save();
        }

#if DEBUG

        if (wafl::similarity_match({filter, "Log OpenGL info"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Log OpenGL info", false);
            if (Cool::ImGuiExtras::toggle("Log OpenGL info", &val))
                json().save();
        }

#endif

        if (wafl::similarity_match({filter, "Log internal warnings"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Log internal warnings",
#if defined(DEBUG)
                                         true
#else
                                         false
#endif
            );
            if (Cool::ImGuiExtras::toggle("Log internal warnings", &val))
                json().save();
        }

        if (wafl::similarity_match({filter, "Log mouse position in View"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Log mouse position in View", false);
            if (Cool::ImGuiExtras::toggle("Log mouse position in View", &val))
                json().save();
        }

        if (wafl::similarity_match({filter, "Show command-line arguments"}) >= wafl::Matches::Strongly)
        {
            json().get<bool>("Show command-line arguments", false) = ImGui::Button("##Show command-line arguments", {ImGui::GetFrameHeight(), ImGui::GetFrameHeight()});
            ImGui::SameLine(0.f, ImGui::GetStyle().ItemInnerSpacing.x);
            ImGui::Text("Show command-line arguments");
            if (ImGui::IsItemClicked())
                json().get<bool>("Show command-line arguments", true) = true;
        }

        if (wafl::similarity_match({filter, "Test Presets"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Test Presets", false);
            if (Cool::ImGuiExtras::toggle("Test Presets", &val))
                json().save();
        }

        if (wafl::similarity_match({filter, "Test Markdown Formatting"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Test Markdown Formatting", false);
            if (Cool::ImGuiExtras::toggle("Test Markdown Formatting", &val))
                json().save();
        }

        if (wafl::similarity_match({filter, "Emulate midi keyboard"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Emulate midi keyboard", false);
            if (Cool::ImGuiExtras::toggle("Emulate midi keyboard", &val))
                json().save();
        }

        if (wafl::similarity_match({filter, "Test tips"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Test tips", false);
            if (Cool::ImGuiExtras::toggle("Test tips", &val))
                json().save();
        }

        if (wafl::similarity_match({filter, "Public exhibition mode"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Public exhibition mode", false);
            if (Cool::ImGuiExtras::toggle("Public exhibition mode", &val))
                json().save();

            Cool::ImGuiExtras::help_marker("Currently, simply resets the author info after sharing an image online.");
        }

        if (wafl::similarity_match({filter, "Style Editor"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Style Editor", false);
            if (Cool::ImGuiExtras::toggle("Style Editor", &val))
                json().save();
        }

        if (wafl::similarity_match({filter, "Color Themes: Editor"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Color Themes: Editor", false);
            if (Cool::ImGuiExtras::toggle("Color Themes: Editor", &val))
                json().save();
        }

        if (wafl::similarity_match({filter, "Color Themes: Advanced Config"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Color Themes: Advanced Config", false);
            if (Cool::ImGuiExtras::toggle("Color Themes: Advanced Config", &val))
                json().save();
        }

#if DEBUG

        if (wafl::similarity_match({filter, "Show all icons"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Show all icons", false);
            if (Cool::ImGuiExtras::toggle("Show all icons", &val))
                json().save();
        }

#endif
#if DEBUG

        if (wafl::similarity_match({filter, "ImGui Item Picker"}) >= wafl::Matches::Strongly)
        {
            json().get<bool>("ImGui Item Picker", false) = ImGui::Button("##ImGui Item Picker", {ImGui::GetFrameHeight(), ImGui::GetFrameHeight()});
            ImGui::SameLine(0.f, ImGui::GetStyle().ItemInnerSpacing.x);
            ImGui::Text("ImGui Item Picker");
            if (ImGui::IsItemClicked())
                json().get<bool>("ImGui Item Picker", true) = true;

            Cool::ImGuiExtras::help_marker("Allows you to click on any ImGui widget and have your IDE break on it, allowing you to find the source code that generated it.\nShortcut: CTRL + SHIFT + I");
        }

#endif
    }

    static void toggle_first_option(std::string_view filter)
    {
        if (wafl::similarity_match({filter, "Test Message Console"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Test Message Console", false);
            val       = !val;
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

        if (wafl::similarity_match({filter, "Test Notifications"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Test Notifications", false);
            val       = !val;
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

        if (wafl::similarity_match({filter, "Test Tasks"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Test Tasks", false);
            val       = !val;
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

        if (wafl::similarity_match({filter, "Log when autosaving"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Log when autosaving", false);
            val       = !val;
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

        if (wafl::similarity_match({filter, "Log when rendering alpha checkerboard background"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Log when rendering alpha checkerboard background", false);
            val       = !val;
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

        if (wafl::similarity_match({filter, "Log when creating textures"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Log when creating textures", false);
            val       = !val;
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

        if (wafl::similarity_match({filter, "Log when computing audio features"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Log when computing audio features", false);
            val       = !val;
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

        if (wafl::similarity_match({filter, "View Texture Library"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("View Texture Library", false);
            val       = !val;
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

#if DEBUG

        if (wafl::similarity_match({filter, "Log OpenGL info"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Log OpenGL info", false);
            val       = !val;
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

#endif

        if (wafl::similarity_match({filter, "Log internal warnings"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Log internal warnings",
#if defined(DEBUG)
                                         true
#else
                                         false
#endif
            );
            val = !val;
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

        if (wafl::similarity_match({filter, "Log mouse position in View"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Log mouse position in View", false);
            val       = !val;
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

        if (wafl::similarity_match({filter, "Show command-line arguments"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Show command-line arguments", false);
            val       = !val;
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

        if (wafl::similarity_match({filter, "Test Presets"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Test Presets", false);
            val       = !val;
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

        if (wafl::similarity_match({filter, "Test Markdown Formatting"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Test Markdown Formatting", false);
            val       = !val;
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

        if (wafl::similarity_match({filter, "Emulate midi keyboard"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Emulate midi keyboard", false);
            val       = !val;
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

        if (wafl::similarity_match({filter, "Test tips"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Test tips", false);
            val       = !val;
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

        if (wafl::similarity_match({filter, "Public exhibition mode"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Public exhibition mode", false);
            val       = !val;
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

        if (wafl::similarity_match({filter, "Style Editor"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Style Editor", false);
            val       = !val;
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

        if (wafl::similarity_match({filter, "Color Themes: Editor"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Color Themes: Editor", false);
            val       = !val;
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

        if (wafl::similarity_match({filter, "Color Themes: Advanced Config"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Color Themes: Advanced Config", false);
            val       = !val;
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

#if DEBUG

        if (wafl::similarity_match({filter, "Show all icons"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Show all icons", false);
            val       = !val;
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

#endif
#if DEBUG

        if (wafl::similarity_match({filter, "ImGui Item Picker"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("ImGui Item Picker", false);
            val       = !val;
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

#endif
    }
};

} // namespace Cool
