/* -----------------------------------------------------------------------------
 * This file was automatically generated by a Python script.
 * PLEASE DON'T EDIT IT DIRECTLY, your changes would be overwritten the next time the script is run.
 * Instead, go to "generator_variables.py" and edit the "find_metadatas_in_string" function there.
 * -----------------------------------------------------------------------------
 */

template<>
auto get_default_metadata(std::string_view) -> Cool::VariableMetadata<bool>
{
    Cool::VariableMetadata<bool> metadata{};
    return metadata;
}

template<>
auto get_default_metadata(std::string_view key_values) -> Cool::VariableMetadata<int>
{
    Cool::VariableMetadata<int> metadata{};

    const auto min_value = Cool::String::find_value_for_given_key<int>(key_values, "min");
    if (min_value)
    {
        metadata.min_value = *min_value;
    }

    const auto max_value = Cool::String::find_value_for_given_key<int>(key_values, "max");
    if (max_value)
    {
        metadata.max_value = *max_value;
    }
    return metadata;
}

template<>
auto get_default_metadata(std::string_view key_values) -> Cool::VariableMetadata<float>
{
    Cool::VariableMetadata<float> metadata{};

    const auto min_value = Cool::String::find_value_for_given_key<float>(key_values, "min");
    if (min_value)
    {
        metadata.min_value = *min_value;
    }

    const auto max_value = Cool::String::find_value_for_given_key<float>(key_values, "max");
    if (max_value)
    {
        metadata.max_value = *max_value;
    }

    const auto bounded = Cool::String::find_value_for_given_key<bool>(key_values, "bounded");
    if (bounded)
    {
        metadata.bounded = *bounded;
    }

    const auto drag_speed = Cool::String::find_value_for_given_key<float>(key_values, "drag_speed");
    if (drag_speed)
    {
        metadata.drag_speed = *drag_speed;
    }
    return metadata;
}

template<>
auto get_default_metadata(std::string_view) -> Cool::VariableMetadata<Cool::Point2D>
{
    Cool::VariableMetadata<Cool::Point2D> metadata{};
    return metadata;
}

template<>
auto get_default_metadata(std::string_view) -> Cool::VariableMetadata<glm::vec2>
{
    Cool::VariableMetadata<glm::vec2> metadata{};
    return metadata;
}

template<>
auto get_default_metadata(std::string_view) -> Cool::VariableMetadata<glm::vec3>
{
    Cool::VariableMetadata<glm::vec3> metadata{};
    return metadata;
}

template<>
auto get_default_metadata(std::string_view) -> Cool::VariableMetadata<glm::vec4>
{
    Cool::VariableMetadata<glm::vec4> metadata{};
    return metadata;
}

template<>
auto get_default_metadata(std::string_view) -> Cool::VariableMetadata<Cool::Camera>
{
    Cool::VariableMetadata<Cool::Camera> metadata{};
    return metadata;
}

template<>
auto get_default_metadata(std::string_view) -> Cool::VariableMetadata<Cool::Angle>
{
    Cool::VariableMetadata<Cool::Angle> metadata{};
    return metadata;
}

template<>
auto get_default_metadata(std::string_view) -> Cool::VariableMetadata<Cool::Direction2D>
{
    Cool::VariableMetadata<Cool::Direction2D> metadata{};
    return metadata;
}

template<>
auto get_default_metadata(std::string_view) -> Cool::VariableMetadata<Cool::Hue>
{
    Cool::VariableMetadata<Cool::Hue> metadata{};
    return metadata;
}

template<>
auto get_default_metadata(std::string_view key_values) -> Cool::VariableMetadata<Cool::Gradient>
{
    Cool::VariableMetadata<Cool::Gradient> metadata{};

    const auto is_hdr = Cool::String::find_value_for_given_key<bool>(key_values, "hdr");
    if (is_hdr)
    {
        metadata.is_hdr = *is_hdr;
    }

    const auto randomize_new_marks_colors = Cool::String::find_value_for_given_key<bool>(key_values, "");
    if (randomize_new_marks_colors)
    {
        metadata.randomize_new_marks_colors = *randomize_new_marks_colors;
    }
    return metadata;
}
